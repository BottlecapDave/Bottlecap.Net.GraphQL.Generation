/// <summary>
/// DO NOT EDIT! This class is automatically generated using Bottlecap.Net.GraphQL.Generation.
/// The source can be found at https://github.com/BottlecapDave/Bottlecap.Net.GraphQL.Generation
/// </summary>

using System;
using System.Threading.Tasks;
using GraphQL.DataLoader;
using GraphQL.Types;

namespace Tests
{
    public static class IGenerateWhenDataLoaderSpecifiedDataLoadersWithCollectionPresentThenDataloaderGeneratedExtensions
    {
        public static Task<System.Collections.Generic.IEnumerable<IntegrationTests.Bottlecap.Net.GraphQL.Generation.Foo>> GetByIdsAsync(this IDataLoaderContextAccessor accessor, 
                                                      IntegrationTests.Bottlecap.Net.GraphQL.Generation.IGenerateWhenDataLoaderSpecifiedDataLoadersWithCollectionPresentThenDataloaderGenerated repository,
                                                      Func<System.Int64> keySelector)
        {
            var loader = accessor.Context.GetOrAddBatchLoader<System.Int64, System.Collections.Generic.IEnumerable<IntegrationTests.Bottlecap.Net.GraphQL.Generation.Foo>>("IntegrationTests.Bottlecap.Net.GraphQL.Generation.IGenerateWhenDataLoaderSpecifiedDataLoadersWithCollectionPresentThenDataloaderGenerated.GetByIdsAsync", (ids) => repository.GetByIdsAsync(ids));
            return loader.LoadAsync(keySelector());
        }
    
    }

}
